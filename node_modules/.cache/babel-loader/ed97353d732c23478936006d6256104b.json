{"ast":null,"code":"var _jsxFileName = \"/Users/denismyachin/Downloads/\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B/online-store-master/front/src/pages/PhotoPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport { Col, Container, Row, Image } from \"react-bootstrap\";\nimport AlbumBar from \"../components/AlbumBar\";\nimport PhotoList from \"../components/PhotoList\";\nimport { observer } from \"mobx-react-lite\";\nimport { Context } from \"../index\";\nimport { fetchPhoto, fetchAlbums } from \"../http/photoAPI\";\nimport Pages from \"../components/Pages\";\nimport Masonry from \"react-masonry-css\";\nimport './PhotoPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhotoPage = observer(_c = _s(() => {\n  _s();\n\n  const {\n    photo\n  } = useContext(Context);\n  useEffect(() => {\n    fetchAlbums().then(data => photo.setAlbums(data));\n    fetchPhoto(null, 1, 15).then(data => {\n      photo.setPhotos(data.rows);\n      photo.setTotalCount(data.count);\n    });\n  }, []);\n  useEffect(() => {\n    if (photo.selectedAlbum === \"all\") {\n      fetchPhoto(photo.selectedAlbum.id, photo.page).then(data => {\n        photo.setPhotos(data.rows);\n        photo.setTotalCount(data.count);\n      });\n    } else {\n      fetchPhoto(photo.selectedAlbum.id, photo.page).then(data => {\n        photo.setPhotos(data.rows);\n        photo.setTotalCount(data.count);\n      });\n    }\n  }, [photo.page, photo.selectedAlbum]);\n  const breakpoints = {\n    default: 4,\n    1100: 2,\n    700: 1\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(AlbumBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containter_\",\n        children: [/*#__PURE__*/_jsxDEV(Masonry, {\n          breakpointCols: breakpoints,\n          className: \"my-masonry-grid\",\n          columnClassName: \"my-masonry-grid_column\",\n          children: photo.photos.map(photo => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"image_\",\n              photo: photo,\n              src: process.env.REACT_APP_API_URL + photo.img\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)\n          }, photo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}, \"OzfubmXy3pDR6P7Qgl+zysXOLok=\"));\n_c2 = PhotoPage;\nexport default PhotoPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PhotoPage$observer\");\n$RefreshReg$(_c2, \"PhotoPage\");","map":{"version":3,"sources":["/Users/denismyachin/Downloads/проекты/online-store-master/front/src/pages/PhotoPage.js"],"names":["React","useContext","useEffect","Col","Container","Row","Image","AlbumBar","PhotoList","observer","Context","fetchPhoto","fetchAlbums","Pages","Masonry","PhotoPage","photo","then","data","setAlbums","setPhotos","rows","setTotalCount","count","selectedAlbum","id","page","breakpoints","default","photos","map","process","env","REACT_APP_API_URL","img"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from 'react';\nimport {Col, Container, Row, Image} from \"react-bootstrap\";\nimport AlbumBar from \"../components/AlbumBar\";\nimport PhotoList from \"../components/PhotoList\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport {fetchPhoto, fetchAlbums} from \"../http/photoAPI\";\nimport Pages from \"../components/Pages\";\nimport Masonry from \"react-masonry-css\";\nimport './PhotoPage.css'\n\nconst PhotoPage = observer(() => {\n    const {photo} = useContext(Context);\n\n    useEffect(() => {\n        fetchAlbums().then(data => photo.setAlbums(data));\n        fetchPhoto(null, 1, 15).then(data => {\n            photo.setPhotos(data.rows);\n            photo.setTotalCount(data.count);\n        });\n    }, []);\n\n    useEffect(\n        () => {\n            if(photo.selectedAlbum === \"all\") {\n                    fetchPhoto(photo.selectedAlbum.id, photo.page, ).then(data => {\n                        photo.setPhotos(data.rows);\n                        photo.setTotalCount(data.count);\n                    });\n                } else {\n                    fetchPhoto(photo.selectedAlbum.id, photo.page, ).then(data => {\n                        photo.setPhotos(data.rows);\n                        photo.setTotalCount(data.count);\n                    });\n                }\n        }, [photo.page, photo.selectedAlbum]);\n\n        const breakpoints = {\n            default: 4,\n            1100: 2,\n            700: 1\n        }\n\n    return (\n        <Container>\n            <Row className=\"mt-3\">\n                \n                    <AlbumBar/>\n                \n                <div className='containter_'>\n                <Masonry\n                        breakpointCols={breakpoints}\n                        className=\"my-masonry-grid\"\n                        columnClassName=\"my-masonry-grid_column\"\n                    >\n                    {photo.photos.map(photo =>\n                        <div key={photo.id} > \n                            <img className='image_' photo={photo} src={process.env.REACT_APP_API_URL + photo.img}/>\n                        </div>\n                    )}\n                </Masonry>\n                    <Pages/>\n                </div>\n            </Row>\n        </Container>\n    );\n});\n\nexport default PhotoPage;\n"]},"metadata":{},"sourceType":"module"}