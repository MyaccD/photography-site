{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport { deleteServiceFromBasket } from \"../http/serviceAPI\";\nexport default class BasketStoreStore {\n  constructor() {\n    this._totalPrice = 0;\n    this._basket = [];\n    makeAutoObservable(this);\n  }\n\n  async setDeleteItemBasket(service, isAuth = false) {\n    if (isAuth) {\n      await deleteServiceFromBasket(service.id).then(() => {\n        this._basket = this._basket.filter(item => item.id !== service.id);\n        this._totalPrice -= service.price * service.count;\n      });\n    } else {\n      this._basket = this._basket.filter(item => item.id !== service.id);\n      this._totalPrice -= service.price * service.count;\n      localStorage.setItem(\"basket\", JSON.stringify(this._basket));\n    }\n  }\n\n  setBasket(item, isAuth = false) {\n    const checkServiceInBasket = this._basket.findIndex(service => service.id === item.id);\n\n    if (checkServiceInBasket < 0) {\n      this._basket = [...this._basket, {\n        count: 1,\n        ...item\n      }];\n      let totalPrice = 0;\n\n      this._basket.forEach(service => totalPrice += Number(service.price * service.count));\n\n      this._totalPrice = totalPrice;\n    }\n\n    if (!isAuth) {\n      localStorage.setItem(\"basket\", JSON.stringify(this._basket));\n    }\n  }\n\n  setDeleteAllServiceFromBasket() {\n    this._totalPrice = 0;\n    return this._basket = [];\n  }\n\n  resetBasket() {\n    this._basket = [];\n    this._totalPrice = 0;\n    localStorage.removeItem('basket');\n  }\n\n  get Basket() {\n    return this._basket;\n  }\n\n  get Price() {\n    return this._totalPrice;\n  }\n\n}","map":{"version":3,"sources":["/Users/denismyachin/Downloads/online-store-master/front/src/store/BasketStore.js"],"names":["makeAutoObservable","deleteServiceFromBasket","BasketStoreStore","constructor","_totalPrice","_basket","setDeleteItemBasket","service","isAuth","id","then","filter","item","price","count","localStorage","setItem","JSON","stringify","setBasket","checkServiceInBasket","findIndex","totalPrice","forEach","Number","setDeleteAllServiceFromBasket","resetBasket","removeItem","Basket","Price"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,MAAjC;AACA,SAAQC,uBAAR,QAAsC,oBAAtC;AAEA,eAAe,MAAMC,gBAAN,CAAuB;AAClCC,EAAAA,WAAW,GAAG;AACV,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,OAAL,GAAe,EAAf;AACAL,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAEwB,QAAnBM,mBAAmB,CAACC,OAAD,EAAUC,MAAM,GAAG,KAAnB,EAA0B;AAC/C,QAAGA,MAAH,EAAW;AACP,YAAMP,uBAAuB,CAACM,OAAO,CAACE,EAAT,CAAvB,CAAoCC,IAApC,CAAyC,MAAM;AACjD,aAAKL,OAAL,GAAe,KAAKA,OAAL,CAAaM,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYF,OAAO,CAACE,EAAhD,CAAf;AACA,aAAKL,WAAL,IAAqBG,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAA7C;AACH,OAHK,CAAN;AAIH,KALD,MAKO;AACH,WAAKT,OAAL,GAAe,KAAKA,OAAL,CAAaM,MAAb,CAAoBC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYF,OAAO,CAACE,EAAhD,CAAf;AACA,WAAKL,WAAL,IAAqBG,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAA7C;AAEAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAe,KAAKb,OAApB,CAA/B;AACH;AACJ;;AAEDc,EAAAA,SAAS,CAACP,IAAD,EAAOJ,MAAM,GAAG,KAAhB,EAAuB;AAC5B,UAAMY,oBAAoB,GAAG,KAAKf,OAAL,CAAagB,SAAb,CAAuBd,OAAO,IAAIA,OAAO,CAACE,EAAR,KAAeG,IAAI,CAACH,EAAtD,CAA7B;;AACA,QAAGW,oBAAoB,GAAG,CAA1B,EAA6B;AACzB,WAAKf,OAAL,GAAe,CAAC,GAAG,KAAKA,OAAT,EAAkB;AAAES,QAAAA,KAAK,EAAE,CAAT;AAAY,WAAGF;AAAf,OAAlB,CAAf;AACA,UAAIU,UAAU,GAAG,CAAjB;;AACA,WAAKjB,OAAL,CAAakB,OAAb,CAAqBhB,OAAO,IAAIe,UAAU,IAAIE,MAAM,CAACjB,OAAO,CAACM,KAAR,GAAgBN,OAAO,CAACO,KAAzB,CAApD;;AACA,WAAKV,WAAL,GAAmBkB,UAAnB;AACH;;AAED,QAAG,CAACd,MAAJ,EAAY;AACRO,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAe,KAAKb,OAApB,CAA/B;AACH;AACJ;;AAEDoB,EAAAA,6BAA6B,GAAG;AAC5B,SAAKrB,WAAL,GAAmB,CAAnB;AACA,WAAO,KAAKC,OAAL,GAAe,EAAtB;AACH;;AAEDqB,EAAAA,WAAW,GAAG;AACV,SAAKrB,OAAL,GAAe,EAAf;AACA,SAAKD,WAAL,GAAmB,CAAnB;AACAW,IAAAA,YAAY,CAACY,UAAb,CAAwB,QAAxB;AACH;;AAGS,MAANC,MAAM,GAAG;AACT,WAAO,KAAKvB,OAAZ;AACH;;AAEQ,MAALwB,KAAK,GAAG;AACR,WAAO,KAAKzB,WAAZ;AACH;;AArDiC","sourcesContent":["import {makeAutoObservable} from \"mobx\";\nimport {deleteServiceFromBasket} from \"../http/serviceAPI\";\n\nexport default class BasketStoreStore {\n    constructor() {\n        this._totalPrice = 0;\n        this._basket = [];\n        makeAutoObservable(this);\n    }\n\n    async setDeleteItemBasket(service, isAuth = false) {\n        if(isAuth) {\n            await deleteServiceFromBasket(service.id).then(() => {\n                this._basket = this._basket.filter(item => item.id !== service.id);\n                this._totalPrice -=  service.price * service.count;\n            });\n        } else {\n            this._basket = this._basket.filter(item => item.id !== service.id);\n            this._totalPrice -=  service.price * service.count;\n\n            localStorage.setItem(\"basket\", JSON.stringify(this._basket));\n        }\n    }\n\n    setBasket(item, isAuth = false) {\n        const checkServiceInBasket = this._basket.findIndex(service => service.id === item.id);\n        if(checkServiceInBasket < 0) {\n            this._basket = [...this._basket, { count: 1, ...item}];\n            let totalPrice = 0;\n            this._basket.forEach(service => totalPrice += Number(service.price * service.count));\n            this._totalPrice = totalPrice;\n        }\n\n        if(!isAuth) {\n            localStorage.setItem(\"basket\", JSON.stringify(this._basket));\n        }\n    }\n\n    setDeleteAllServiceFromBasket() {\n        this._totalPrice = 0;\n        return this._basket = [];\n    }\n\n    resetBasket() {\n        this._basket = [];\n        this._totalPrice = 0;\n        localStorage.removeItem('basket');\n    }\n\n\n    get Basket() {\n        return this._basket;\n    }\n\n    get Price() {\n        return this._totalPrice;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}