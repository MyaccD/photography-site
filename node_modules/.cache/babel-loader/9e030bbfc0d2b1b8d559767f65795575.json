{"ast":null,"code":"var _jsxFileName = \"/Users/denismyachin/Downloads/\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B/online-store-master/front/src/pages/Shop.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport TypeBar from \"../components/TypeBar\";\nimport ServiceList from \"../components/ServiceList\";\nimport { observer } from \"mobx-react-lite\";\nimport { Context } from \"../index\";\nimport { fetchService, fetchTypes } from \"../http/serviceAPI\";\nimport Pages from \"../components/Pages\";\nimport Masonry from \"react-masonry-css\";\nimport './Shop.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Shop = observer(_c = _s(() => {\n  _s();\n\n  const {\n    service\n  } = useContext(Context);\n  useEffect(() => {\n    fetchTypes().then(data => service.setTypes(data));\n    fetchService(null, 1, 3).then(data => {\n      service.setServices(data.rows);\n      service.setTotalCount(data.count);\n    });\n  }, []);\n  useEffect(() => {\n    if (service.selectedType === \"all\") {\n      fetchService(service.selectedType.id, service.page, 9).then(data => {\n        service.setServices(data.rows);\n        service.setTotalCount(data.count);\n      });\n    } else {\n      fetchService(service.selectedType.id, service.page, 3).then(data => {\n        service.setServices(data.rows);\n        service.setTotalCount(data.count);\n      });\n    }\n  }, [service.page, service.selectedType]);\n  const breakpoints = {\n    default: 4,\n    1100: 2,\n    700: 1\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 2,\n        children: /*#__PURE__*/_jsxDEV(TypeBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 10,\n        children: /*#__PURE__*/_jsxDEV(Masonry, {\n          breakpointCols: breakpoints,\n          className: \"my-masonry-grid\",\n          columnClassName: \"my-masonry-grid_column\",\n          children: [/*#__PURE__*/_jsxDEV(ServiceList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}, \"UDc/5HGSO7ZWB/yO+Vo93s9aKt8=\"));\n_c2 = Shop;\nexport default Shop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Shop$observer\");\n$RefreshReg$(_c2, \"Shop\");","map":{"version":3,"sources":["/Users/denismyachin/Downloads/проекты/online-store-master/front/src/pages/Shop.js"],"names":["React","useContext","useEffect","Col","Container","Row","TypeBar","ServiceList","observer","Context","fetchService","fetchTypes","Pages","Masonry","Shop","service","then","data","setTypes","setServices","rows","setTotalCount","count","selectedType","id","page","breakpoints","default"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect} from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport TypeBar from \"../components/TypeBar\";\nimport ServiceList from \"../components/ServiceList\";\nimport {observer} from \"mobx-react-lite\";\nimport {Context} from \"../index\";\nimport {fetchService, fetchTypes} from \"../http/serviceAPI\";\nimport Pages from \"../components/Pages\";\nimport Masonry from \"react-masonry-css\";\nimport './Shop.css'\nconst Shop = observer(() => {\n    const {service} = useContext(Context);\n\n    useEffect(() => {\n        fetchTypes().then(data => service.setTypes(data));\n        fetchService(null, 1, 3).then(data => {\n            service.setServices(data.rows);\n            service.setTotalCount(data.count);\n        });\n    }, []);\n\n    useEffect(\n        () => {\n            if(service.selectedType === \"all\") {\n                    fetchService(service.selectedType.id, service.page, 9).then(data => {\n                        service.setServices(data.rows);\n                        service.setTotalCount(data.count);\n                    });\n                } else {\n                    fetchService(service.selectedType.id, service.page, 3).then(data => {\n                        service.setServices(data.rows);\n                        service.setTotalCount(data.count);\n                    });\n                }\n        }, [service.page, service.selectedType]);\n\n        const breakpoints = {\n            default: 4,\n            1100: 2,\n            700: 1\n        }\n    \n\n    return (\n        <Container>\n            <Row className=\"mt-3\">\n                <Col md={2}>\n                    <TypeBar/>\n                </Col>\n                <Col md={10}>\n\n                <Masonry\n                        breakpointCols={breakpoints}\n                        className=\"my-masonry-grid\"\n                        columnClassName=\"my-masonry-grid_column\"\n                    >\n                    <ServiceList/>\n                    <Pages/>\n                    </Masonry>\n                </Col>\n            </Row>\n        </Container>\n    );\n});\n\nexport default Shop;\n"]},"metadata":{},"sourceType":"module"}